openapi: 3.0.0
info:
  title: GatewayUser
  version: 1.0.0
servers:
- url: /
paths:
  /users:
    get:
      security:
       - bearerAuth: []
      tags:
       - "users"
      operationId: ListUsers
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: ["admin", "client"]
          required: false
        - in: query
          name: status
          schema:
            type: integer
            enum: [1, 2]
          required: false
          description: User status (1 - active; 2 - blocked)
        - in: query
          name: limit
          schema:
            type: integer
          required: true
        - in: query
          name: offset
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
    post:
      tags:
       - "users"
      security:
       - bearerAuth: []
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    put:
      security:
       - bearerAuth: []
      tags:
       - "users"
      operationId: UpdateUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int32
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      security:
       - bearerAuth: []
      tags:
       - "users"
      operationId: DeleteUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int32
          required: true
      responses:
        "204":
          description: Successful user delete
    get:
      security:
       - bearerAuth: []
      tags:
       - "users"
      operationId: GetUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int32
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
  /movies:
    get:
      security:
       - bearerAuth: []
      tags:
       - "movies"
      operationId: ListMovies
      parameters:
        - in: query
          name: category
          schema:
            type: integer
            enum: [0, 1]
            default: 0
          required: false
          description: Movie category (0 - action; 1 - horror)
        - in: query
          name: year_start
          schema:
            type: integer
          required: false
          description: Movie release year start
        - in: query
          name: year_end
          schema:
            type: integer
          required: false
          description: Movie release year end
        - in: query
          name: limit
          schema:
            type: integer
          required: true
        - in: query
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          name: only_rented
          schema:
            type: boolean
          required: false
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMoviesResponse'
    post:
      tags:
       - "movies"
      security:
       - bearerAuth: []
      operationId: CreateMovie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovieRequest'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
  /movies/{movieId}:
    put:
      security:
       - bearerAuth: []
      tags:
       - "movies"
      operationId: UpdateMovie
      parameters:
        - in: path
          name: movieId
          schema:
            type: integer
            format: int32
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
    delete:
      security:
       - bearerAuth: []
      tags:
       - "movies"
      operationId: DeleteMovie
      parameters:
        - in: path
          name: movieId
          schema:
            type: integer
            format: int32
          required: true
      responses:
        "204":
          description: Successful movie delete
    get:
      security:
       - bearerAuth: []
      tags:
       - "movies"
      operationId: GetMovie
      parameters:
        - in: path
          name: movieId
          schema:
            type: integer
            format: int32
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Movie'
  /register:
    post:
      tags:
       - "auth"
      operationId: RegisterUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        "400":
          description: UserExists
  /login:
    post:
      tags:
       - "auth"
      operationId: LoginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:
    RegisterRequest:
      type: object
      properties:
        Email:
          type: string
        DisplayName:
          type: string
        Age:
          type: integer
        Phone:
          type: string
        Password:
          type: string
    RegisterResponse:
      type: object
      properties:
        JWT:
          type: string
    LoginRequest:
      type: object
      properties:
        Email:
          type: string
        Password:
          type: string
    LoginResponse:
      type: object
      properties:
        JWT:
          type: string
    Movie:
      type: object
      properties:
        ID:
          type: integer
        Title:
          type: string
        ReleaseYear:
          type: string
        Category:
          type: integer
    User:
      type: object
      properties:
        ID:
          type: integer
        Balance:
          type: number
          format: float64
        DisplayName:
          type: string
        Email:
          type: string
        Role:
          type: string
        Status:
          type: integer
        Age:
          type: integer
        Phone:
          type: string
    ListMoviesResponse:
      type: object
      properties:
        PageNum:
          type: integer
        PageSize:
          type: integer
        Payload:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    ListUsersResponse:
      type: object
      properties:
        PageNum:
          type: integer
        PageSize:
          type: integer
        Payload:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CreateUserRequest:
      type: object
      properties:
        DisplayName:
          type: string
        Email:
          type: string
        Role:
          type: string
        Status:
          type: integer
        Age:
          type: integer
        Phone:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        ID:
          type: integer
        DisplayName:
          type: string
        Email:
          type: string
        Role:
          type: string
        Status:
          type: integer
        Age:
          type: integer
        Phone:
          type: string
    CreateMovieRequest:
      type: object
      properties:
        Title:
          type: string
        ReleaseYear:
          type: string
        Category:
          type: integer
    UpdateMovieRequest:
      type: object
      properties:
        ID:
          type: integer
        Title:
          type: string
        ReleaseYear:
          type: string
        Category:
          type: integer
