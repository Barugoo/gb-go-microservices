// Code generated by go-swagger; DO NOT EDIT.

package movies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListMoviesParams creates a new ListMoviesParams object
// with the default values initialized.
func NewListMoviesParams() ListMoviesParams {

	var (
		// initialize parameters with default values

		categoryDefault = int64(0)
	)

	return ListMoviesParams{
		Category: &categoryDefault,
	}
}

// ListMoviesParams contains all the bound params for the list movies operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListMovies
type ListMoviesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Movie category (0 - action; 1 - horror)
	  In: query
	  Default: 0
	*/
	Category *int64
	/*
	  Required: true
	  In: query
	*/
	Limit int64
	/*
	  In: query
	*/
	Offset *int64
	/*
	  In: query
	*/
	OnlyRented *bool
	/*Movie release year end
	  In: query
	*/
	YearEnd *int64
	/*Movie release year start
	  In: query
	*/
	YearStart *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListMoviesParams() beforehand.
func (o *ListMoviesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCategory, qhkCategory, _ := qs.GetOK("category")
	if err := o.bindCategory(qCategory, qhkCategory, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOnlyRented, qhkOnlyRented, _ := qs.GetOK("only_rented")
	if err := o.bindOnlyRented(qOnlyRented, qhkOnlyRented, route.Formats); err != nil {
		res = append(res, err)
	}

	qYearEnd, qhkYearEnd, _ := qs.GetOK("year_end")
	if err := o.bindYearEnd(qYearEnd, qhkYearEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qYearStart, qhkYearStart, _ := qs.GetOK("year_start")
	if err := o.bindYearStart(qYearStart, qhkYearStart, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCategory binds and validates parameter Category from query.
func (o *ListMoviesParams) bindCategory(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListMoviesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("category", "query", "int64", raw)
	}
	o.Category = &value

	if err := o.validateCategory(formats); err != nil {
		return err
	}

	return nil
}

// validateCategory carries on validations for parameter Category
func (o *ListMoviesParams) validateCategory(formats strfmt.Registry) error {

	if err := validate.EnumCase("category", "query", *o.Category, []interface{}{0, 1}, true); err != nil {
		return err
	}

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ListMoviesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("limit", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("limit", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ListMoviesParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindOnlyRented binds and validates parameter OnlyRented from query.
func (o *ListMoviesParams) bindOnlyRented(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("only_rented", "query", "bool", raw)
	}
	o.OnlyRented = &value

	return nil
}

// bindYearEnd binds and validates parameter YearEnd from query.
func (o *ListMoviesParams) bindYearEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("year_end", "query", "int64", raw)
	}
	o.YearEnd = &value

	return nil
}

// bindYearStart binds and validates parameter YearStart from query.
func (o *ListMoviesParams) bindYearStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("year_start", "query", "int64", raw)
	}
	o.YearStart = &value

	return nil
}
