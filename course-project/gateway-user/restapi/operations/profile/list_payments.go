// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListPaymentsHandlerFunc turns a function with the right signature into a list payments handler
type ListPaymentsHandlerFunc func(ListPaymentsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListPaymentsHandlerFunc) Handle(params ListPaymentsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListPaymentsHandler interface for that can handle valid list payments params
type ListPaymentsHandler interface {
	Handle(ListPaymentsParams, interface{}) middleware.Responder
}

// NewListPayments creates a new http.Handler for the list payments operation
func NewListPayments(ctx *middleware.Context, handler ListPaymentsHandler) *ListPayments {
	return &ListPayments{Context: ctx, Handler: handler}
}

/*ListPayments swagger:route GET /profile/payments profile listPayments

ListPayments list payments API

*/
type ListPayments struct {
	Context *middleware.Context
	Handler ListPaymentsHandler
}

func (o *ListPayments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListPaymentsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
