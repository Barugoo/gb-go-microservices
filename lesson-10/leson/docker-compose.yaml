version: '3.2'
services:
    grafana:
        image: grafana/grafana
        ports:
          - 3000:3000
    prometheus:
        image: prom/prometheus
        ports:
            - 9090:9090
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    consul:
        image: consul:1.9.4
        container_name: consul_dashboard__consul
        hostname: consul.consul-conf.docker
        volumes:
        - ./docker/data/consul/data:/consul/data
        - ./docker/data/consul/config:/consul/config
        ports:
        - 8500:8500
        command: ["consul", "agent", "-server", "-ui", "-bind", "0.0.0.0", "-client", "0.0.0.0", "-data-dir", "/consul/data", "-config-dir", "/consul/config", "-bootstrap", "-datacenter", "docker"]

    gateway-user:
        build:
            context: ./gateway-user
            dockerfile: Dockerfile
        volumes:
            - ./docker-elk/logs:/var/log/super-cinema
        ports:
        - '8080:8080'
        command: ["/app/main","--consul_addr","consul:8500"]
        depends_on: 
            - consul

    movie:
        build:
            context: ./movie-service
            dockerfile: Dockerfile
        volumes:
            - ./docker-elk/logs:/var/log/super-cinema
        ports:
        - '9098:9098'
        command: ["/app/main","--consul_addr","consul:8500"]
        depends_on: 
            - consul

    elasticsearch:
        build:
            context: docker-elk/elasticsearch/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
          - type: bind
            source: ./docker-elk/elasticsearch/config/elasticsearch.yml
            target: /usr/share/elasticsearch/config/elasticsearch.yml
            read_only: true
          - type: volume
            source: elasticsearch
            target: /usr/share/elasticsearch/data
        ports:
        - "9200:9200"
        - "9300:9300"
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
            ELASTIC_PASSWORD: changeme
            # Use single node discovery in order to disable production mode and avoid bootstrap checks.
            # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        networks:
        - elk

    logstash:
        build:
            context: docker-elk/logstash/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
          - type: bind
            source: ./docker-elk/logstash/config/logstash.yml
            target: /usr/share/logstash/config/logstash.yml
            read_only: true
          - type: bind
            source: ./docker-elk/logstash/pipeline
            target: /usr/share/logstash/pipeline
            read_only: true
          - type: bind
            source: ./logs
            target: /usr/share/logstash/input
            read_only: false
        ports:
        - "5000:5000/tcp"
        - "5000:5000/udp"
        - "9600:9600"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
        - elk
        depends_on:
        - elasticsearch

    kibana:
        build:
            context: docker-elk/kibana/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
          - type: bind
            source: ./docker-elk/kibana/config/kibana.yml
            target: /usr/share/kibana/config/kibana.yml
            read_only: true
        ports:
        - "5601:5601"
        networks:
        - elk
        depends_on:
        - elasticsearch

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch: